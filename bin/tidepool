#!/bin/bash -eu
shopt -s extglob

DIR=$(cd $(dirname $(dirname ${0})); pwd)

usage() {
  cat <<EOF
=======================================================
USAGE: tidepool command [service] [...additional args]


  ### Kubernetes Server Commands ###

  server-init                     Used once to initially provision the k8s stack. Specifically, it:
                                    1. Provisions and starts the Kubernetes server
                                    2. Saves the Kubernetes server config to ${KUBECONFIG}.

  server-start                    Start (and provision if needed) the Kubernetes server
  server-stop                     Stop the Kubernetes server
  server-logs                     Tail logs for the Kubernetes server

  server-docker [...cmds]         Run docker commands within the context of the Kubernetes server
  server-exec [...cmds]           Run shell commands in the Kubernetes server container

  server-prune                    Remove any unused images, containers, and volumes within the
                                  Kubernetes server

  server-destroy                  Shut down and completely remove the local Kubernetes server and
                                  all services


  ### Tidepool Services Commands ###

  start                           Provision and start the Tidepool services
  stop                            Stop and remove the Tidepool services
  restart [service]               Restart the specified service
  logs [service]                  Tail logs for the specified service

  exec service [...cmds]          Run shell commands in the currently running service
                                  container
                                    example:
                                      tidepool exec blip sh
                                      (to enter a shell inside the blip container)
                                    example:
                                      tidepool exec blip "ls -lR /app/node_modules/ | grep ^l | uniq"
                                      (to list all symlinked npm packages, such as after yarn linking)

  yarn [service] [...cmds]        Run yarn commands against the specified Node.js-based service.
                                  [service] must be one of:
                                    blip, @tidepool/viz, tideline, tidepool-platform-client,
                                    export, gatekeeper, highwater, jellyfish, message-api, seagull
                                  NOTE: tideline, @tidepool/viz, and tidepool-platform-client
                                  are optional Tilt-provided mounts within the blip service
                                    example: tidepool yarn @tidepool/viz stories
                                    example: tidepool yarn tidepool-platform-client test

  port-forward [service] [port]   Forward a port to a running service container
  verify-account-email [email]    Complete the email address verification step for a created account

  restart-proxy                   Restart the external gateway proxy
                                  Useful if the exposed "blip" port stops responding on host machine


  ### Other Commands ###

  doctor                          Check to see if all dependancies are up-to-date, and recommended
                                  environment variables are set
EOF
}

run_docker() { args="${@:1}" && (set_docker_env && docker ${args}) }

run_docker_compose() { args="${@:1}" && (docker-compose -f 'docker-compose.k8s.yml' ${args}) }

restart() { (for P in ${@}; do kubectl scale deployment --replicas=0 ${P} && kubectl scale deployment --replicas=1 ${P}; done) }

run_exec() { args="${@:2}" && (kubectl exec -ti svc/${1} -c ${1} -- /bin/sh -c "${args}") }

mongo_exec() { args="${@:1}" && (kubectl exec -ti svc/mongodb -c mongo -- /bin/sh -c "${args}") }

check_version() {
  pkg=${1}
  version_cmd=${2}
  min=${3}
  if [ $([[ $($pkg $version_cmd) =~ [0-9\.]+ ]] && printf "${min}\n${BASH_REMATCH}" | sort -V | head -n1) = "$min" ]; then
      echo "✔ ${pkg} is up to date"
  else
      echo "✘ ${pkg} is out of date. Please install version >= ${min}"
  fi
}

check_environment() {
  if [[ ! -z ${!1} ]]; then
    echo "✔ \$${1} is set"
  else
    echo "✘ \$${1} is not set. See \"Environment Setup\" in README"
  fi
}

doctor() {
  set +u
  echo "Checking dependancy versions..."
  check_version helm 'version --short' 3.0.2
  check_version tilt 'version' 0.16.1
  check_version docker '-v' 19.0.0
  check_version docker-compose '-v' 1.25.0
  check_version kubectl 'version --client --short' 1.18.2
  echo
  echo "Checking environment config..."
  check_environment KUBECONFIG
  check_environment TIDEPOOL_DOCKER_MONGO_VOLUME
}

run_yarn() {
  NODE_SERVICES='@(blip|export|gatekeeper|highwater|jellyfish|message-api|seagull)'
  BLIP_MOUNTED_NODE_SERVICES='@(tideline|tidepool-platform-client|@tidepool/viz)'

  if [[ ${BLIP_MOUNTED_NODE_SERVICES} =~ ${1} ]]; then
    run_exec blip "cd ./packageMounts/${1} && yarn ${@:2}"
  elif [[ ${NODE_SERVICES} =~ ${1} ]]; then
    run_exec ${1} "yarn ${@:2}"
  else
    printf "The yarn command can only be run on Node.js services\n\n"
  fi
}

set_docker_env() {
  export DOCKER_HOST=tcp://127.0.0.1:2375
}

set_tilt_env() {
  set_docker_env

  case "$1" in
    --trap-shutdown) trap 'SHUTTING_DOWN=1 tilt down' EXIT;;
    --shutdown) export SHUTTING_DOWN=1;;
  esac
}

wait_for_kubernetes_ready() {
  until curl -s --fail http://127.0.0.1:10080/kubernetes-ready; do
    sleep 1;
  done
}

set_kubeconfig() {
  wait_for_kubernetes_ready
  curl http://127.0.0.1:10080/config | sed "s|172.30.99.1|127.0.0.1|g" > ${KUBECONFIG}
}

destroy() {
  read -p "Are you sure you want to destroy the local tidepool server? [N|y] " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    cd ${DIR} && run_docker_compose rm -fsv
    rm -r ${DIR}/local/charts
  else
    echo "Destroy command aborted"
  fi
}

server_init() {
  $0 server-start
  set_kubeconfig
  init_metrics_server
}

init_metrics_server() {
    cd ${DIR} && docker-compose -f 'docker-compose.k8s.yml' exec server sh -c "if ! grep -qF 'authentication-token-webhook=true' kubelet.sh; then sed -i '/--authorization-mode=Webhook/a --authentication-token-webhook=true \\\' kubelet.sh; fi"

    # Restart the server and wait till ready
    cd ${DIR} && run_docker_compose restart
    wait_for_kubernetes_ready

    # Wait until kubectl ready
    until kubectl get nodes; do
      sleep 5;
    done
}

case ${1-help} in
  server-init) server_init;;
  server-start) (cd ${DIR} && run_docker_compose up -d ${2-});;
  server-stop) (cd ${DIR} && run_docker_compose stop ${2-});;
  server-logs) (cd ${DIR} && run_docker_compose logs --tail=100 -f server);;
  server-docker) run_docker "${@:2}";;
  server-exec) (cd ${DIR} && run_docker_compose exec server sh);;
  server-prune) (run_docker "system prune --volumes -af" && run_docker "builder prune --all -f");;
  server-destroy) (cd ${DIR} && destroy);;
  start) (cd ${DIR} && set_tilt_env --trap-shutdown && tilt up -dv --port=0 --hud=true ${2-});;
  stop) (cd ${DIR} && set_tilt_env --shutdown && tilt down);;
  restart) shift 1 && restart ${@};;
  logs) (cd ${DIR} && kubectl logs svc/${2} --tail=100 -c ${2} -f);;
  exec) run_exec ${2} ${@:3};;
  yarn) run_yarn ${2} "${@:3}";;
  port-forward) (cd ${DIR} && kubectl port-forward svc/${2} ${3});;
  verify-account-email) mongo_exec "mongo --eval 'db.users.update({username: \"${@:2}\"},{\$set:{\"authenticated\":true}});' user";;
  restart-proxy) restart gateway-proxy;;
  doctor) doctor;;
  *) usage;;
esac
